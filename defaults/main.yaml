cluster_spec_file: /tmp/{{ clusterSpec.cluster_name }}-cluster-spec.yaml
vpc_cfn_template_file: /tmp/{{ clusterSpec.cluster_name }}-vpc-cfn.yaml
ssh_public_key_file: /tmp/{{ clusterSpec.cluster_name }}-ssh-public-key
kops_log_file: /tmp/{{ clusterSpec.cluster_name }}-kops-out.log

defaultClusterSpec:
  create_bastions: false
  attach_transit_vpc: false
  createDNSForwarders: false
  vpcPeeringCidrs: []
  dnsForwarderInstanceType: r4.large
  dnsForwaderImageName: amzn-ami-hvm-2018.03.0.20180811-x86_64-gp2
  dnsForwaderImageOwner: '137112412989'
  kubeScheduler: {}
  kubeDNS: {}
  enableEtcdTLS: false
  etcdEventsVolumeSize: 20
  etcdMainVolumeSize: 20
  etcdVersion:
  kubeAPIServer:
    runtimeConfig:
      batch/v2alpha1: "true"
  kubelet:
    enableCustomMetrics: true
  kubeControllerManager:
    horizontalPodAutoscalerUseRestClients: true
  api:
    loadBalancer:
      type: Internal
      idleTimeoutSeconds: 300
      additionalSecurityGroups: []
  authorization:
    rbac: {}
  channel: stable
  cloudLabels: {}
  cloudProvider: aws
  kubernetesApiAccess:
  - 0.0.0.0/0
  hooks: []
  fileAssets: []
  assets: {}
  cloudConfig: {}
  docker: {}
  iam:
    allowContainerRegistry: true
    legacy: false
  kubernetesVersion: 1.10.7
  nonMasqueradeCIDR: 100.64.0.0/10
  networking:
    calico: {}
  sshAccess:
  - 0.0.0.0/0
  additionalPolicies:
    node: |
      [
        {
          "Action": [
            "sts:AssumeRole"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]
    master: |
      [
        {
          "Action": [
            "sts:AssumeRole"
          ],
          "Effect": "Allow",
          "Resource": "*"
        }
      ]

  defaultInstanceGroupSpec:
    image: kope.io/k8s-1.9-debian-jessie-amd64-hvm-ebs-2018-03-11
    autoScalerEnabled: true
    machineType: t2.micro

  instanceGroups:
    masters:
      machineType: t2.medium
      rootVolumeSize: 50
    bastions:
      machineType: t2.micro

  awsSideAsn: '65532'
  vpcStackPrefix: 'k8s-vpc-'

  clusterAddons:
    kube2iam:
      enabled: true
      chart: stable/kube2iam
      chart_version: '0.9.0'
      namespace: kube-system
      values:
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        extraArgs:
          auto-discover-default-role:
        host:
          iptables: true
          interface: cali+
        rbac:
          create: true

    cluster-autoscaler:
      enabled: true
      chart: stable/cluster-autoscaler
      chart_version: '0.7.0'
      namespace: kube-system
      values:
        ## SafeToEvict=false enhancment
        image:
          tag: v1.2.3
        awsRegion: '{{ clusterSpec.aws_region }}'
        cloudProvider: aws
        autoDiscovery:
          clusterName: '{{ clusterSpec.cluster_name }}'
        rbac:
          create: true
        podAnnotations:
          iam.amazonaws.com/role: k8s-cluster-autoscaler-{{ clusterSpec.cluster_name }}

    metrics-server:
      enabled: true
      chart: stable/metrics-server
      chart_version: '2.0.2'
      namespace: kube-system
      values:
        rbac:
          create: true

    kube-state-metrics:
      enabled: true
      chart: stable/kube-state-metrics
      chart_version: '0.9.0'
      namespace: kube-system
      values:
        rbac:
          create: true
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
            limits:
              cpu: 100m
              memory: 200Mi

    external-dns:
      enabled: true
      chart: 'stable/external-dns'
      chart_version: '0.7.5'
      namespace: kube-system
      values:
        aws:
          provider: 'aws'
          region: '{{ clusterSpec.aws_region }}'
        policy: sync
        rbac:
          create: true
        podAnnotations:
          iam.amazonaws.com/role: k8s-external-dns-{{ clusterSpec.cluster_name }}

    alb-ingress:
      enabled: true
      chart: 'quay.io/coreos/alb-ingress-controller-helm'
      chart_version: '0.1.2'
      namespace: kube-system
      values:
        clusterName: '{{ clusterSpec.cluster_name }}'
        awsRegion: '{{ clusterSpec.aws_region }}'
        podAnnotations:
          iam.amazonaws.com/role: k8s-aws-alb-ingress-{{ clusterSpec.cluster_name }}
        livenessProbeInitialDelay: 300

##### Default IAM Roles and Polcies
default_iam_policies:
  k8s-cluster-autoscaler:
    policy_description: A managed policy for k8s cluster-autoscaler
    policy:
      Version: '2012-10-17'
      Statement:
      - Effect: Allow
        Action:
        - autoscaling:DescribeAutoScalingGroups
        - autoscaling:DescribeAutoScalingInstances
        - autoscaling:DescribeLaunchConfigurations
        - autoscaling:DescribeTags
        - autoscaling:SetDesiredCapacity
        - autoscaling:TerminateInstanceInAutoScalingGroup
        Resource: "*"

  k8s-external-dns:
    policy_description: A managed policy for k8s external-dns
    policy:
      Version: '2012-10-17'
      Statement:
      - Effect: Allow
        Action:
        - route53:ChangeResourceRecordSets
        Resource:
        - arn:aws:route53:::hostedzone/*
      - Effect: Allow
        Action:
        - route53:ListHostedZones
        - route53:ListResourceRecordSets
        Resource:
        - "*"

  k8s-aws-alb-ingress:
    policy_description: A managed policy for k8s aws-alb-ingress-controller
    policy:
      Version: '2012-10-17'
      Statement:
      - Effect: Allow
        Action:
        - acm:DescribeCertificate
        - acm:ListCertificates
        - acm:GetCertificate
        Resource: "*"
      - Effect: Allow
        Action:
        - ec2:AuthorizeSecurityGroupIngress
        - ec2:CreateSecurityGroup
        - ec2:CreateTags
        - ec2:DeleteSecurityGroup
        - ec2:DescribeInstances
        - ec2:DescribeInstanceStatus
        - ec2:DescribeSecurityGroups
        - ec2:DescribeSubnets
        - ec2:DescribeTags
        - ec2:DescribeVpcs
        - ec2:ModifyInstanceAttribute
        - ec2:RevokeSecurityGroupIngress
        Resource: "*"
      - Effect: Allow
        Action:
        - elasticloadbalancing:AddTags
        - elasticloadbalancing:CreateListener
        - elasticloadbalancing:CreateLoadBalancer
        - elasticloadbalancing:CreateRule
        - elasticloadbalancing:CreateTargetGroup
        - elasticloadbalancing:DeleteListener
        - elasticloadbalancing:DeleteLoadBalancer
        - elasticloadbalancing:DeleteRule
        - elasticloadbalancing:DeleteTargetGroup
        - elasticloadbalancing:DeregisterTargets
        - elasticloadbalancing:DescribeListeners
        - elasticloadbalancing:DescribeLoadBalancers
        - elasticloadbalancing:DescribeLoadBalancerAttributes
        - elasticloadbalancing:DescribeRules
        - elasticloadbalancing:DescribeSSLPolicies
        - elasticloadbalancing:DescribeTags
        - elasticloadbalancing:DescribeTargetGroups
        - elasticloadbalancing:DescribeTargetGroupAttributes
        - elasticloadbalancing:DescribeTargetHealth
        - elasticloadbalancing:ModifyListener
        - elasticloadbalancing:ModifyLoadBalancerAttributes
        - elasticloadbalancing:ModifyRule
        - elasticloadbalancing:ModifyTargetGroup
        - elasticloadbalancing:ModifyTargetGroupAttributes
        - elasticloadbalancing:RegisterTargets
        - elasticloadbalancing:RemoveTags
        - elasticloadbalancing:SetIpAddressType
        - elasticloadbalancing:SetSecurityGroups
        - elasticloadbalancing:SetSubnets
        - elasticloadbalancing:SetWebACL
        Resource: "*"
      - Effect: Allow
        Action:
        - iam:GetServerCertificate
        - iam:ListServerCertificates
        Resource: "*"
      - Effect: Allow
        Action:
        - waf-regional:GetWebACLForResource
        Resource: "*"
      - Effect: Allow
        Action:
        - tag:GetResources
        Resource: "*"
      - Effect: Allow
        Action:
        - waf:GetWebACL
        - waf:AssociateWebACL
        - waf:DisassociateWebACL
        Resource: "*"

  k8s-cloudwatch-logs:
    policy_description: A managed policy for sending logs to cloudwatch
    policy:
      Version: '2012-10-17'
      Statement:
      - Effect: Allow
        Action:
        - logs:CreateLogStream
        - logs:CreateLogGroup
        - logs:PutLogEvents
        - logs:DescribeLogStreams
        - logs:DescribeLogGroups
        Resource:
        - arn:aws:logs:*:*:log-group:*
        - arn:aws:logs:*:*:log-group:*:log-stream:*

default_iam_roles:
  k8s-cluster-autoscaler:
    policies:
    - k8s-cluster-autoscaler
  k8s-external-dns:
    policies:
    - k8s-external-dns
  k8s-aws-alb-ingress:
    policies:
    - k8s-aws-alb-ingress
  k8s-cloudwatch-logs:
    policies:
    - k8s-cloudwatch-logs

iam_policies: {}
iam_roles: {}